node.js - node.js is a JavaScript runtime environment. We use node
to run js server side. We do not need a browser to run js

NPM node package manger - This is our dependency mangaer
similar to Maven except instead of Java it is JavaScript on node.js

package.json - It is a list of dependecnies for our node project
listed in a json format

we can install the dependecnies but calling npm install

SPA -A single page application is a website wherin there is 
only one main html page and html/js/css is dynamically inserted
and removed to create a smooth browsing experience

AngularJS- Was the orginal Angular. It was written in JavaScript
and had features like scope. 

Angular 2.0 - An SPA designed by Google. It is written in TypeScript
Angular 2.0 and up are called Angular. 

Angular CLI (Command Line Interface) - command line utility
to generate projects, components, pipes, services
ng some command ng new projectname , ng compenent cname
USE IT!!!

WebPack - Module bundler. This is responsible for wrapping up your 
htmlTypeScript and all its dependecnies into a cohesive 
final project to be sent to the client. 
Can send this code in module sized chunks
for efficency sake

TypeScript- A Superset of JavaScript
- Created by Microsoft
- provides more oop support than js it has classes and access modifiers
- interfaces 
- strongly typed
- You cannot run a TypeScript file
- TypeScript will transpile into JavaScript and that js is run

access modifiers
public - Function like Java
private - Function like Java
protected - Function like Java
read only - Value cannot be changed and must initialezed when 
Created

TypeScript types
boolean, number, string , void, array, undefined, null, enum, any
you can also create your own types
never 

*any basically emulates JavaScript dynamic interprative behavior
*never is the return type for a function that should not finish
or should fail

Advantages of TypeScript
- more oop
- statically typed
- Catch more errors at compile time

------------------------------------------------------------------
Angular
- JS Framework for building SPA
- Allows for expressive HTML and is modular
- the functional gear of an Angular application is the component

Module
- The highest level of design in Angular
- cohesive block of components providing functionality
- All Angular apps have at least the root-module
- The root module will bootstap a root-component

Bootsraping
- process of an initial piece of pulling in more code 
which can in turn pull in more code and builds off itself
- Chaining chunks together

component
- The functional gear of Angular

1. HTML template
2. TS file (Logic for that html)
3. Decorator (Meta information and labeling for that component)
    Selector - the name of the html tag for this component
    template url - the location of the html for the component
    style url - the location of the css for the component

Directive (Custom Html)

1. attribute directives like NgModel custom html attributes
2. structural directives like *ngFor and *ngIf add remove html elements which are the 
building  blocks of a webpage. That is why they are called structural directives
3. component directive which is a custom html tag

Data binding

event binding
HTML => TS (click) = "someFunction()"

two way binding
HTML <==> TS [(NgModel)] = "value"

property binding
TS => HTML [href] ="variable"

interpolation
TS => HTML {{name}}

pipe |
A pipe will transform some sourt of input into a different output before
it is displayed in the html. 

input                      output
10 | currency : 'USD'      $10.00

dependency Injection
- Design pattern where a class recieves an instance of an object it needs to function
in the constructor. This instance that is injected is shared among classes
- Change only one class and have it affect multiple classes without having us to refactor
- In Angular we see this with services which provide some sort of utility to differnt
components
- In general if we need a certain function that is not component specific it should be a
service

Steps to creating a service and using it in a class
1. ng generate service myservice
1.5 the service has the @Injectable Decorator which says the Angular Injector
can use inject this class into other classes
2. add the service to the provider
3. add the service to the constructor of the class using it
                            The service that is injected
constructor(private service:SomeService)

How to set up Routing
1. import RouterModule
2. RouterModule.forRoutes(routes)
3. const routes: Route = [
    {path :"urlA" component: componentA}
]
4. <router-outlet><router-outlet>

Observable 
- Asynchronous object
- You create Observable by setting up a call.
- You then subsribe to the Observable 
- the subsribe method takes in callback functions that handle if the call is successful
vs unsuccessful

creating an http call
1. import HttpClientModule and add it to imports
2. import HttpClient to whatever class is going to use it
3. http.get(url) or http.post(url) these return an Observable (addressing the letter)
4. Once you have an observable you can subscribe to it which starts the actual Asynchronous
call














